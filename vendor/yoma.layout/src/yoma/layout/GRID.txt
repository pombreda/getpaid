================
Form Layout Grid
================

A grid is tabular collection of cells to aid in rendering layouts
of form widgets.  There some restrictions in setting grid cells to
prevent against inadvertantly messing up.


Building a Grid
---------------

    >>> from yoma.layout.grid import Grid, Cell

Cells are added to a grid specifying a target row and column indices.
A Cell simply contains a value, a width (in rows) and a height (in columns).

Rows are counted from top=0, in a positive downward direction.
Columns are counted from left=0, in a postive right direction.

A Grid also maintains it's overall width (in rows) and overall height
(in columns).  This is handy when a cell value is (an embedded) grid.

    >>> grid = Grid()
    >>> print grid.height, grid.width
    0 0

    >>> grid.set(row=0, col=0, cell=Cell('a'))
    >>> print grid.height, grid.width
    1 1

    >>> grid.set(0, 1, Cell('b'))
    >>> print grid.height, grid.width
    1 2
    >>> grid.set(0, 2, Cell('c',width=2))
    >>> print grid.height, grid.width
    1 4
    >>> grid.set(1, 0, Cell('d',width=2))
    >>> print grid.height, grid.width
    2 4
    >>> grid.set(1, 2, Cell('e',height=2))
    >>> print grid.height, grid.width
    3 4


Accessing a Grid
----------------

Print the current contents of the grid using the iter method of
the grid.

    >>> for row, col, cell in grid.iter():
    ...    print row, col, cell
    0 0 Cell('a', width=1, height=1)
    0 1 Cell('b', width=1, height=1)
    0 2 Cell('c', width=2, height=1)
    1 0 Cell('d', width=2, height=1)
    1 2 Cell('e', width=1, height=2)

When a cell is added to a grid with a width and/or height of more
than one, then the adjacent cells are reserved.  This is done to
protect against cell collisions.

We can see the reserved cells by specifying showall=True to the
grid iter method:

    >>> for row, col, cell in grid.iter(showall=True):
    ...    print row, col, cell
    0 0 Cell('a', width=1, height=1)
    0 1 Cell('b', width=1, height=1)
    0 2 Cell('c', width=2, height=1)
    0 3 Cell(reserved, width=1, height=1)
    1 0 Cell('d', width=2, height=1)
    1 1 Cell(reserved, width=1, height=1)
    1 2 Cell('e', width=1, height=2)
    2 2 Cell(reserved, width=1, height=1)

As a short cut we can use pprint to look at all the cells since the
structure is a row dict of column dict:

    >>> from pprint import pprint
    >>> pprint(grid.cells)
    {0: {0: Cell('a', width=1, height=1),
         1: Cell('b', width=1, height=1),
         2: Cell('c', width=2, height=1),
         3: Cell(reserved, width=1, height=1)},
     1: {0: Cell('d', width=2, height=1),
         1: Cell(reserved, width=1, height=1),
         2: Cell('e', width=1, height=2)},
     2: {2: Cell(reserved, width=1, height=1)}}


Table-like Access
-----------------

Rendering a grid into a table requires access by row, and column of row:

    >>> for row in grid.iterRows():
    ...     print 'row:', row
    ...     for col in grid.iterCols(row):
    ...         print ' col:', col, grid.get(row, col)
    row: 0
     col: 0 Cell('a', width=1, height=1)
     col: 1 Cell('b', width=1, height=1)
     col: 2 Cell('c', width=2, height=1)
    row: 1
     col: 0 Cell('d', width=2, height=1)
     col: 2 Cell('e', width=1, height=2)


Cell Collisions
---------------

Overwriting cells is not allowed to prevent a against in advertantly
messing up a grid.

    >>> grid.set(0, 0, Cell('bogus')) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    IndexError: cell taken: row 0, col 0

Reserved cells mark adjacent space taken up by non-singular cells to
protect cell collisions in these regions.

    >>> grid.set(2, 0, Cell('bogus', width=3)) #doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    IndexError: cell taken: row 2, col 2


Embedding Grids
---------------

A common use case is to embed layouts within layouts.

    >>> g2 = Grid()
    >>> g2.set(0, 0, Cell('A'))
    >>> g2.set(0, 1, Cell('B'))
    >>> g2.set(1, 0, Cell('C'))
    >>> print g2.height, g2.width
    2 2

    >>> grid.set(2, 0, Cell(g2))

    >>> pprint(grid.cells)
    {0: {0: Cell('a', width=1, height=1),
         1: Cell('b', width=1, height=1),
         2: Cell('c', width=2, height=1),
         3: Cell(reserved, width=1, height=1)},
     1: {0: Cell('d', width=2, height=1),
         1: Cell(reserved, width=1, height=1),
         2: Cell('e', width=1, height=2)},
     2: {0: Cell(Grid(width=2, height=2), width=1, height=1),
         2: Cell(reserved, width=1, height=1)}}

