Order Management in GetPaid
===========================

Getpaid's core functionality is represented as an order management
system.

Creating an Order
=================

  >>> from getpaid.core.order import Order
  >>> order = Order()

Carts and Line Items
====================

An order consists of line items. line items can come from a variety of
sources, content space payables, gift certificates, ie. anything we
potentially want to purchase:

  >>> from getpaid.core.item import RecurrentPayableLineItem
  >>> from Products.PloneGetPaid.interfaces import IRecurrentPaymentMarker
  >>> from Products.Five.utilities import marker
  >>> marker.mark( portal, IRecurrentPaymentMarker)

  >>> item = RecurrentPayableLineItem()

Let's set some attributes expected on line items. The only system invariant
here is that item_id should be unique when referring to purchasing the same
item:

  >>> from zope import component
  >>> from zope.app.intid.interfaces import IIntIds

  >>> item.item_id = "event-devtalk-2007-1"
  >>> item.name = "Event Registration"
  >>> item.cost = 25.00
  >>> item.quantity = 5
  >>> item.description = "Development Talk"
  >>> item.uid = component.getUtility( IIntIds ).register(portal)

Line Items are stored in a line item container, such as a shopping cart
of shipment:

  >>> from getpaid.core.cart import ShoppingCart
  >>> cart = ShoppingCart()
  >>> cart[ item.item_id ] = item

we can ask the cart how many items it has:

  >>> cart.size()
  5

Let's attach our cart to the order:

  >>> order.shopping_cart = cart

and now we can ask the order, its total price:

  >>> order.getSubTotalPrice()
  Decimal("125.0")

[ xxx talk about products and payable line items here ??]

Customer Information
====================

We need some additional information for an order to successfully process it:

  >>> from getpaid.core import payment
  >>> bill_address = payment.BillingAddress()
  >>> bill_address.bill_first_line = '1418 W Street NW'
  >>> bill_address.bill_city = 'Washington'
  >>> bill_address.bill_state = "DC"
  >>> bill_address.bill_country = "US"
  >>> bill_address.bill_postal_code = '20009'
  >>>
  >>>
  >>> contact_info = payment.ContactInformation()
  >>>
  >>> order.contact_information = contact_info
  >>> order.billing_address = bill_address

If we don't need to ship anything to the user, then we can forgo
setting a shipping address.


Introspection and Classification
================================

When we create an order, an order inspection component which
subscribes to the order created event, gets a chance to look at all
the contents of an order and modify it. The default inspector, will
add additional marker interfaces to the order to classify it based on
its contents as a shippable order, donation order, etc. Based on these
marker interfaces and corresponding compnent registration, we can
specialize adapation of orders to workflows, payment processing as
appropriate for a given order.

  >>> try:
  ...     from zope.lifecycleevent import ObjectCreatedEvent
  ... except ImportError:
  ...     from zope.app.event.objectevent import ObjectCreatedEvent
  >>> from zope.event import notify
  >>> notify( ObjectCreatedEvent( order ))

  >>> from getpaid.core.interfaces import IRecurrentOrder
  >>> IRecurrentOrder.providedBy(order)
  True
